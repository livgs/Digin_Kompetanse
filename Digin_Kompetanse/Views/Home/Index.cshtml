@model Digin_Kompetanse.Models.ViewModels.KompetanseRegistreringViewModel
@using Microsoft.AspNetCore.Mvc.Rendering

@{
ViewData["Title"] = "Kompetansekartlegging";
}


<h2>Registrer kompetanse</h2>

<form asp-action="Index" asp-controller="Home" method="post" class="form-container">
    @Html.AntiForgeryToken()
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    
    <div class="form-group mb-3">
        <label asp-for="BedriftNavn" class="form-label">Bedriftens navn</label>
        <input asp-for="BedriftNavn" class="form-control" />
        <span asp-validation-for="BedriftNavn" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="BedriftEpost" class="form-label">Bedriftens e-post</label>
        <input asp-for="BedriftEpost" class="form-control" />
        <span asp-validation-for="BedriftEpost" class="text-danger"></span>
    </div>
    
    <div class="form-group mb-3">
        <label asp-for="FagområdeId" class="form-label">Fagområde</label>
        <select asp-for="FagområdeId"
                asp-items="@(ViewBag.Fagområder as SelectList)"
                id="fagområde"
                class="form-select">
            <option value="">Velg fagområde</option>
        </select>
        <span asp-validation-for="FagområdeId" class="text-danger"></span>
    </div>
    
    <div class="form-group mb-3">
        <label asp-for="KompetanseId" class="form-label">Kompetanse</label>
        <select asp-for="KompetanseId" id="kompetanse" class="form-select">
            <option value="">Velg kompetanse</option>
        </select>
        <span asp-validation-for="KompetanseId" class="text-danger"></span>
    </div>
    
    <div class="form-group mb-3">
        <label asp-for="UnderkompetanseId" class="form-label">Underkompetanse</label>
        <select asp-for="UnderkompetanseId" id="underkompetanse" class="form-select">
            <option value="">Velg underkompetanse</option>
        </select>
        <span asp-validation-for="UnderkompetanseId" class="text-danger"></span>
    </div>
    
    <div class="form-group mb-3">
        <label asp-for="Beskrivelse" class="form-label">Beskrivelse</label>
        <textarea asp-for="Beskrivelse"
                  rows="4"
                  class="form-control"
                  placeholder="Beskrivelse"></textarea>
        <span asp-validation-for="Beskrivelse" class="text-danger"></span>
    </div>
    
    <div class="form-group button-wrapper mt-3">
        <button type="submit" class="btn btn-primary btn-submit">Send inn</button>
    </div>
</form>
     
@section Scripts {
<partial name="_ValidationScriptsPartial" />

<script>
    
    const fagSelect = document.getElementById("fagområde");
    const kompetanseSelect = document.getElementById("kompetanse");
    const underkompetanseSelect = document.getElementById("underkompetanse");
    
    const getKompetanserUrl = '@Url.Action("GetKompetanser", "Home")';
    const getUnderkompetanserUrl = '@Url.Action("GetUnderkompetanser", "Home")';
    
    function setLoading(selectEl, loading) {
        selectEl.disabled = loading;
    }
    
    fagSelect.addEventListener("change", async function () {
        const fagId = this.value;
        
        kompetanseSelect.innerHTML = '<option value="">Velg kompetanse</option>';
        underkompetanseSelect.innerHTML = '<option value="">Velg underkompetanse</option>';

        if (!fagId) return;

        try {
            setLoading(kompetanseSelect, true);
            const res = await fetch(`${getKompetanserUrl}?fagområdeId=${encodeURIComponent(fagId)}`);
            if (!res.ok) throw new Error('Kunne ikke hente kompetanser');

            const data = await res.json();
            for (const k of data) {
                const opt = document.createElement("option");
                opt.value = k.kompetanseId;
                opt.text = k.kompetanseKategori;
                kompetanseSelect.appendChild(opt);
            }
        } catch (e) {
            alert(e.message);
        } finally {
            setLoading(kompetanseSelect, false);
        }
    });
    
    kompetanseSelect.addEventListener("change", async function () {
        const kompetanseId = this.value;

        underkompetanseSelect.innerHTML = '<option value="">Velg underkompetanse</option>';
        if (!kompetanseId) return;

        try {
            setLoading(underkompetanseSelect, true);
            const res = await fetch(`${getUnderkompetanserUrl}?kompetanseId=${encodeURIComponent(kompetanseId)}`);
            if (!res.ok) throw new Error('Kunne ikke hente underkompetanser');

            const data = await res.json();
            for (const uk of data) {
                const opt = document.createElement("option");
                opt.value = uk.underkompetanseId;
                opt.text = uk.underkompetanseNavn;
                underkompetanseSelect.appendChild(opt);
            }
        } catch (e) {
            alert(e.message);
        } finally {
            setLoading(underkompetanseSelect, false);
        }
    });
</script>
}
