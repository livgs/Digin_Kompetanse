// <auto-generated />
using System;
using Digin_Kompetanse.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Digin_Kompetanse.Migrations
{
    [DbContext(typeof(KompetanseContext))]
    [Migration("20251022092049_AddIsActiveAndModifiedColumnsToBedriftKompetanse")]
    partial class AddIsActiveAndModifiedColumnsToBedriftKompetanse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Digin_Kompetanse.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("admin_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminEpost")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("admin_epost");

                    b.Property<string>("AdminPassordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("admin_passord_hash");

                    b.Property<string>("Navn")
                        .HasColumnType("text")
                        .HasColumnName("navn");

                    b.HasKey("AdminId");

                    b.ToTable("admin");
                });

            modelBuilder.Entity("Digin_Kompetanse.Models.Bedrift", b =>
                {
                    b.Property<int>("BedriftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bedrift_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BedriftId"));

                    b.Property<string>("BedriftEpost")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("bedrift_epost");

                    b.Property<string>("BedriftNavn")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("bedrift_navn");

                    b.Property<string>("Beskrivelse")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("beskrivelse");

                    b.HasKey("BedriftId")
                        .HasName("bedrift_pkey");

                    b.ToTable("bedrift", (string)null);
                });

            modelBuilder.Entity("Digin_Kompetanse.Models.BedriftKompetanse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BedriftId")
                        .HasColumnType("integer")
                        .HasColumnName("bedrift_id");

                    b.Property<string>("Beskrivelse")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("beskrivelse");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("FagområdeId")
                        .HasColumnType("integer")
                        .HasColumnName("fagomrade_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("KompetanseId")
                        .HasColumnType("integer")
                        .HasColumnName("kompetanse_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<int?>("ModifiedByBedriftId")
                        .HasColumnType("integer")
                        .HasColumnName("modified_by_bedrift_id");

                    b.Property<int?>("UnderKompetanseId")
                        .HasColumnType("integer")
                        .HasColumnName("underkompetanse_id");

                    b.HasKey("Id")
                        .HasName("bedrift_kompetanse_pkey");

                    b.HasIndex("BedriftId")
                        .HasDatabaseName("ix_bedrift_kompetanse_bedrift_id");

                    b.HasIndex("FagområdeId")
                        .HasDatabaseName("ix_bedrift_kompetanse_fagomrade_id");

                    b.HasIndex("KompetanseId")
                        .HasDatabaseName("ix_bedrift_kompetanse_kompetanse_id");

                    b.HasIndex("UnderKompetanseId")
                        .HasDatabaseName("ix_bedrift_kompetanse_underkompetanse_id");

                    b.HasIndex("BedriftId", "FagområdeId", "KompetanseId", "UnderKompetanseId")
                        .IsUnique()
                        .HasDatabaseName("ux_bedrift_kompetanse_unique_choice_active")
                        .HasFilter("\"is_active\" = true");

                    b.ToTable("bedrift_kompetanse", (string)null);
                });

            modelBuilder.Entity("Digin_Kompetanse.Models.Fagområde", b =>
                {
                    b.Property<int>("FagområdeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("fagomrade_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FagområdeId"));

                    b.Property<int?>("BedriftId")
                        .HasColumnType("integer");

                    b.Property<string>("FagområdeNavn")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("fagomrade_navn");

                    b.HasKey("FagområdeId")
                        .HasName("fagomrade_pkey");

                    b.HasIndex("BedriftId");

                    b.ToTable("fagomrade", (string)null);
                });

            modelBuilder.Entity("Digin_Kompetanse.Models.Kompetanse", b =>
                {
                    b.Property<int>("KompetanseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("kompetanse_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("KompetanseId"));

                    b.Property<string>("KompetanseKategori")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("kompetanse_kategori");

                    b.HasKey("KompetanseId")
                        .HasName("kompetanse_pkey");

                    b.ToTable("kompetanse", (string)null);
                });

            modelBuilder.Entity("Digin_Kompetanse.Models.LoginToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Attempts")
                        .HasColumnType("integer")
                        .HasColumnName("attempts");

                    b.Property<int>("BedriftId")
                        .HasColumnType("integer")
                        .HasColumnName("bedrift_id");

                    b.Property<string>("CodeHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code_hash");

                    b.Property<DateTime?>("ConsumedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consumed_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.HasKey("Id")
                        .HasName("login_token_pkey");

                    b.HasIndex("BedriftId", "ExpiresAt")
                        .HasDatabaseName("ix_login_token_bedrift_expires");

                    b.ToTable("login_token", (string)null);
                });

            modelBuilder.Entity("Digin_Kompetanse.Models.UnderKompetanse", b =>
                {
                    b.Property<int>("UnderkompetanseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("underkompetanse_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UnderkompetanseId"));

                    b.Property<int?>("KompetanseId")
                        .HasColumnType("integer")
                        .HasColumnName("kompetanse_id");

                    b.Property<string>("UnderkompetanseNavn")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("underkompetanse_navn");

                    b.HasKey("UnderkompetanseId")
                        .HasName("under_kompetanse_pkey");

                    b.HasIndex("KompetanseId");

                    b.ToTable("under_kompetanse", (string)null);
                });

            modelBuilder.Entity("fagomrade_has_kompetanse", b =>
                {
                    b.Property<int>("fagomrade_id")
                        .HasColumnType("integer")
                        .HasColumnName("fagomrade_id");

                    b.Property<int>("kompetanse_id")
                        .HasColumnType("integer")
                        .HasColumnName("kompetanse_id");

                    b.HasKey("fagomrade_id", "kompetanse_id")
                        .HasName("fagomrade_has_kompetanse_pkey");

                    b.HasIndex("kompetanse_id");

                    b.ToTable("fagomrade_has_kompetanse", (string)null);
                });

            modelBuilder.Entity("Digin_Kompetanse.Models.BedriftKompetanse", b =>
                {
                    b.HasOne("Digin_Kompetanse.Models.Bedrift", "Bedrift")
                        .WithMany("BedriftKompetanser")
                        .HasForeignKey("BedriftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_bedrift_kompetanse_bedrift");

                    b.HasOne("Digin_Kompetanse.Models.Fagområde", "Fagområde")
                        .WithMany()
                        .HasForeignKey("FagområdeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_bedrift_kompetanse_fagomrade");

                    b.HasOne("Digin_Kompetanse.Models.Kompetanse", "Kompetanse")
                        .WithMany()
                        .HasForeignKey("KompetanseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_bedrift_kompetanse_kompetanse");

                    b.HasOne("Digin_Kompetanse.Models.UnderKompetanse", "UnderKompetanse")
                        .WithMany()
                        .HasForeignKey("UnderKompetanseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_bedrift_kompetanse_underkompetanse");

                    b.Navigation("Bedrift");

                    b.Navigation("Fagområde");

                    b.Navigation("Kompetanse");

                    b.Navigation("UnderKompetanse");
                });

            modelBuilder.Entity("Digin_Kompetanse.Models.Fagområde", b =>
                {
                    b.HasOne("Digin_Kompetanse.Models.Bedrift", null)
                        .WithMany("Fagområdes")
                        .HasForeignKey("BedriftId");
                });

            modelBuilder.Entity("Digin_Kompetanse.Models.LoginToken", b =>
                {
                    b.HasOne("Digin_Kompetanse.Models.Bedrift", "Bedrift")
                        .WithMany()
                        .HasForeignKey("BedriftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_login_token_bedrift");

                    b.Navigation("Bedrift");
                });

            modelBuilder.Entity("Digin_Kompetanse.Models.UnderKompetanse", b =>
                {
                    b.HasOne("Digin_Kompetanse.Models.Kompetanse", "Kompetanse")
                        .WithMany("UnderKompetanses")
                        .HasForeignKey("KompetanseId")
                        .HasConstraintName("under_kompetanse_kompetanse_id_fkey");

                    b.Navigation("Kompetanse");
                });

            modelBuilder.Entity("fagomrade_has_kompetanse", b =>
                {
                    b.HasOne("Digin_Kompetanse.Models.Fagområde", null)
                        .WithMany()
                        .HasForeignKey("fagomrade_id")
                        .IsRequired()
                        .HasConstraintName("fagomrade_has_kompetanse_fagomrade_id_fkey");

                    b.HasOne("Digin_Kompetanse.Models.Kompetanse", null)
                        .WithMany()
                        .HasForeignKey("kompetanse_id")
                        .IsRequired()
                        .HasConstraintName("fagomrade_has_kompetanse_kompetanse_id_fkey");
                });

            modelBuilder.Entity("Digin_Kompetanse.Models.Bedrift", b =>
                {
                    b.Navigation("BedriftKompetanser");

                    b.Navigation("Fagområdes");
                });

            modelBuilder.Entity("Digin_Kompetanse.Models.Kompetanse", b =>
                {
                    b.Navigation("UnderKompetanses");
                });
#pragma warning restore 612, 618
        }
    }
}
